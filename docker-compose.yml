services:
  rentalapi:
    build:
      context: ./RentalApi
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: ${DB_CONNECTION}
      RabbitMQ__Host: ${RABBITMQ_HOST}
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    depends_on:
      - db
      - rabbitmq

  tests:
    build:
      context: .
      dockerfile: Tests/RentalApi.Tests/Dockerfile.test
    env_file:
      - .env
    environment:
      ASPNETCORE_ENVIRONMENT: Testing
      ConnectionStrings__DefaultConnection: ${DB_CONNECTION_TEST}
      RabbitMQ__Host: ${RABBITMQ_HOST}
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    depends_on:
      - db-test
      - rabbitmq
    profiles:
      - test  # Só roda quando especificado
    command: ["dotnet", "test", "./Tests/RentalApi.Tests/", "--logger", "console;verbosity=detailed"]

  # Serviço para rodar testes unitários
  test-unit:
    build:
      context: .
      dockerfile: Tests/RentalApi.Tests/Dockerfile.test
    env_file:
      - .env
    environment:
      ASPNETCORE_ENVIRONMENT: Testing
      ConnectionStrings__DefaultConnection: ${DB_CONNECTION_TEST}
      RabbitMQ__Host: ${RABBITMQ_HOST}
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    depends_on:
      - rabbitmq
    profiles:
      - test-unit
    command: ["dotnet", "test", "./Tests/RentalApi.Tests/", "--filter", "Category!=Integration", "--logger", "console;verbosity=detailed"]

  # Serviço para rodar testes de integração RabbitMQ
  test-rabbitmq:
    build:
      context: .
      dockerfile: Tests/RentalApi.Tests/Dockerfile.test
    env_file:
      - .env
    environment:
      ASPNETCORE_ENVIRONMENT: Testing
      ConnectionStrings__DefaultConnection: ${DB_CONNECTION_TEST}
      RabbitMQ__Host: ${RABBITMQ_HOST}
      RabbitMQ__Username: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASS}
    depends_on:
      - rabbitmq
    profiles:
      - test-rabbitmq
    command: ["dotnet", "test", "./Tests/RentalApi.Tests/", "--filter", "FullyQualifiedName~RabbitMq", "--logger", "console;verbosity=detailed"]

  # Serviço para rodar apenas testes que não precisam de RabbitMQ
  test-db:
    build:
      context: .
      dockerfile: Tests/RentalApi.Tests/Dockerfile.test
    environment:
      ASPNETCORE_ENVIRONMENT: Testing
    profiles:
      - test-db
    command: ["dotnet", "test", "./Tests/RentalApi.Tests/", "--filter", "FullyQualifiedName~Repository", "--logger", "console;verbosity=detailed"]

  # Serviço para testes de integração com RabbitMQ
  integration-test:
    build:
      context: .
      dockerfile: Tests/RentalApi.Tests/Dockerfile.integration
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DOCKER_HOST: unix:///var/run/docker.sock
    privileged: true
    profiles:
      - integration-test
    command: ["dotnet", "test", "./Tests/RentalApi.Tests/", "--verbosity", "normal", "--filter", "FullyQualifiedName~RabbitMqIntegrationTests"]

  # Banco para testes
  db-test:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_TEST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - pgdata-test:/var/lib/postgresql/data
    profiles:
      - test

  db:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}

volumes:
  pgdata:
  pgdata-test:
